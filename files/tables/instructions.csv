Instruction,Note,Type,Example,Effect
add,Add two registers,R,"add $t1, $t2, $t3",t1 = t2 + t3
subtract,Subtract two registers,R,"sub $t1, $t2, $t3",t1 = t2 - t3
add immediate (constant),Add a register and a 16-bit value,I,"addi $t1, $t2, 10",t1 = t2 + 10
,,,,
load word,Load from memory at address register + immediate into a register,I,"lw $s0, 4($sp)",s0 = *(sp + 4)
store word,Store a register to memory at address register + immediate,I,"sw $s0, 4($sp)",*(sp + 4) = s0
load immediate,Store a 16-bit value in the lower half of a 32-bit register,I,"li $t0, 100",t0 = 100
load upper immediate,Store a 16-bit value in the upper half of a 32-bit register,I,"lui $t0, 100",t0 = (100 << 16)
,,,,
and,Bitwise and two registers,R,"and $t1, $t2, $t3",t1 = t2 & t3
or,Bitwise or two registers,R,"or $t1, $t2, $t3",t1 = t2 | t3
nor,Bitwise nor two registers,R,"nor $t1, $t2, $t3",t1 = ~(t2 | t3)
and immediate,Bitwise and a register and a value,I,"andi $t1, $t2, 4",t1 = the value at the third least significant bit of t2
or immediate,Bitwise or a register and a value,I,"ori $t1, $t2, 7",t1 = the value of t2 but the least three significant bits are set to 1
shift left logical,Shift the bits of a register left,R,"sll $t1, $t2, 1",t1 = t2 << 1 = t2 * 2
shift right logical,Shift the bits of a register right,R,"srl $t1, $t2, 1",t1 = t2 >> 1 = t2 / 2
not,???,???,???,???
,,,,
branch if equal,Move the program counter to its current location (the next instruction to execute) plus the immediate (can be specified as a label) if the registers are equal,I,"beq $t1, $t2, 8",t1 == t2? PC = PC + 4 + 8 : PC = PC + 4
branch if not equal,Move the program counter to its current location (the next instruction to execute) plus the immediate (can be specified as a label) if the registers are NOT equal,I,"beq $t1, $t2, 8",t1 != t2? PC = PC + 4 + 8 : PC = PC + 4
set if less than,"Set the result to 1 if the source register is less than the target register, 0 otherwise",R,"slt $t1, $t2, $t3",t2 < t3 ? t1 = 1: t1 = 0
set if less than immediate,"Set the result to 1 if the source register is less than the immediate, 0 otherwise",I,"slti $t1, $t2, 1",t2 < 1 ? t1 = 1: t1 = 0
branch if less than,???,???,???,???
,,,,
jump,"Set the program counter to the jump target (augmented by the first 4 bits of the current program counter, and assuming the last two bits are 0 for word alignment)",J,j loop,Set PC to the address of loop
jump and link (function call),"Same as jump, but set the jr register to the current program counter (the next instruction to execute) to enable a return",J,jal factorial,"Set PC to the address of factorial, set $ra to PC+4"
jump register (return),Set the program counter to the value in the register,R,jr $ra,Set the PC to the value of $ra
